#!/usr/bin/env node
/*!
 * RedScript compiler
 * Copyright(c) 2013 Adam Brodzinski <adambrodzinski@gmail.com>
 * MIT Licensed
 */

/**
 * Dependencies
 */
var fs = require('fs')
  , cmd = require('../lib/cmdLine')
  , render = require('../lib/render');

var args =  process.argv.slice(2)
  , opts =  cmd.getOptions(args)
  , files = cmd.getFiles(args);

// make options from arglist global
global.options = opts;

// Initialize / reset entire state object
process.on('state:reset', function() {
    global.state = {
        debug: false,
        declaredVars: [],
        ittIndex: 0,
        hasClass: false
    };
});

// init the state object
process.emit('state:reset')


// update each key's value in state
process.on('state:update', function(obj) {
    for (var key in obj) {
      state[key] = obj[key];
    }
});


// Increment a key's value by one
// @type {string} key
process.on('ittIndex:inc', function(key) {
    //console.log('before inc:', state.ittIndex);
    state.ittIndex += 1;
    // send an updated count
    process.emit('state:send', state.ittIndex);
    //console.log(state);
});


/**
 * If user passes watch flag, check every 100ms to see if the current
 * modification date is more than the previous check. If so, render file.
 */
if (opts.watchFiles && files.length) {
    files.forEach(function(file) {
       render(file);
    });
    console.log();
    console.log(">>> RedScript is watching for changes. Pres Ctrl-C to quit");
    files.forEach(function(file) {
        fs.watchFile(file, {interval: 100}, function (curr, prev) {
            if (curr.mtime > prev.mtime) {
                render(file);
            }
       });
    });

/**
 *  If no watch flag is passed, render each file
 */
} else if (files.length) {
    files.forEach(function(file) {
       render(file);
    });
} else {
  console.log(""+
    " No RedScript files specified, type --help for more info \n" +
    " redscript [filename1] [filename2] \n" +
    " redscript watch [filename1] [filename2]"
  );
}

// OCD induced blank line

